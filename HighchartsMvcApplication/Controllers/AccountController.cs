using System;
using System.Collections.Generic;
using System.Diagnostics.CodeAnalysis;
using System.Linq;
using System.Security.Principal;
using System.Web;
using System.Web.Mvc;
using System.Web.Routing;
using System.Web.Security;
using HighchartsMvcApplication.Models;
using System.Net;
using System.IO;
using System.Text.RegularExpressions;

namespace HighchartsMvcApplication.Controllers
{

    [HandleError]
    public class AccountController : Controller
    {

        public IFormsAuthenticationService FormsService { get; set; }
        public IMembershipService MembershipService { get; set; }

        protected override void Initialize(RequestContext requestContext)
        {
            if (FormsService == null) { FormsService = new FormsAuthenticationService(); }
            if (MembershipService == null) { MembershipService = new AccountMembershipService(); }

            base.Initialize(requestContext);
        }

        // **************************************
        // URL: /Account/LogOn
        // **************************************

        public ActionResult LogOn()
        {
            return View();
        }

        [HttpPost]
        public ActionResult LogOn(LogOnModel model, string returnUrl)
        {
            if (ModelState.IsValid)
            {
                if (MembershipService.ValidateUser(model.UserName, model.Password))
                {
                    FormsService.SignIn(model.UserName, model.RememberMe);
                    if (!String.IsNullOrEmpty(returnUrl))
                    {
                        return Redirect(returnUrl);
                    }
                    else
                    {
                        return RedirectToAction("Index", "Home");
                    }
                }
                else
                {
                    ModelState.AddModelError("", "The user name or password provided is incorrect.");
                }
            }

            // If we got this far, something failed, redisplay form
            return View(model);
        }

        // **************************************
        // URL: /Account/LogOff
        // **************************************

        public ActionResult LogOff()
        {
            FormsService.SignOut();

            return RedirectToAction("Index", "Home");
        }

        // **************************************
        // URL: /Account/Register
        // **************************************

        public ActionResult Register()
        {
            ViewData["PasswordLength"] = MembershipService.MinPasswordLength;
            return View();
        }

        [HttpPost]
        public ActionResult Register(RegisterModel model)
        {
            if (ModelState.IsValid)
            {
                // Attempt to register the user
                MembershipCreateStatus createStatus = MembershipService.CreateUser(model.UserName, model.Password, model.Email);

                if (createStatus == MembershipCreateStatus.Success)
                {
                    FormsService.SignIn(model.UserName, false /* createPersistentCookie */);
                    return RedirectToAction("Index", "Home");
                }
                else
                {
                    ModelState.AddModelError("", AccountValidation.ErrorCodeToString(createStatus));
                }
            }

            // If we got this far, something failed, redisplay form
            ViewData["PasswordLength"] = MembershipService.MinPasswordLength;
            return View(model);
        }

        // **************************************
        // URL: /Account/ChangePassword
        // **************************************

        [Authorize]
        public ActionResult ChangePassword()
        {
            ViewData["PasswordLength"] = MembershipService.MinPasswordLength;
            return View();
        }

        [Authorize]
        [HttpPost]
        public ActionResult ChangePassword(ChangePasswordModel model)
        {
            if (ModelState.IsValid)
            {
                if (MembershipService.ChangePassword(User.Identity.Name, model.OldPassword, model.NewPassword))
                {
                    return RedirectToAction("ChangePasswordSuccess");
                }
                else
                {
                    ModelState.AddModelError("", "The current password is incorrect or the new password is invalid.");
                }
            }

            // If we got this far, something failed, redisplay form
            ViewData["PasswordLength"] = MembershipService.MinPasswordLength;
            return View(model);
        }

        // **************************************
        // URL: /Account/ChangePasswordSuccess
        // **************************************

        public ActionResult ChangePasswordSuccess()
        {
            return View();
        }

        [HttpGet]
        public JsonResult Jsonp()
        {
            int[] data = new int[] { 23, 4, 34, 34, 54, 35, 34, 45, 34, 54, 35, 4, 35, 53, 35, 43 };
            return Json(data, JsonRequestBehavior.AllowGet);
        }

        public class App
        {
            public int appid;
            public string name;
            public DateTime stamp;
            public int tasks;
        }

        [HttpGet]
        public JsonResult Stats0()
        {
            List<App> apps = new List<App>();
            apps.Add(new App { appid = 147, name = "app", stamp = DateTime.Now.AddDays(-1), tasks = 543 });
            apps.Add(new App { appid = 147, name = "app", stamp = DateTime.Now.AddDays(-2), tasks = 876 });
            apps.Add(new App { appid = 147, name = "app", stamp = DateTime.Now.AddDays(-3), tasks = 463 });
            apps.Add(new App { appid = 147, name = "app", stamp = DateTime.Now.AddDays(-4), tasks = 56 });
            apps.Add(new App { appid = 147, name = "app", stamp = DateTime.Now.AddDays(-5), tasks = 107 });

            var res = new {
                stamp = (from x in apps select x.stamp),
                dt = (from x in apps select x.stamp.TimeOfDay.TotalMilliseconds),
                dtstr = (from x in apps select x.stamp.ToString("dd/MM/yyyy")),
                tasks = (from x in apps select x.tasks),
                appid = (from x in apps select x.appid),
                appname = (from x in apps select x.name)
            };

            List<long> days = new List<long>();
            List<decimal> values = new List<decimal>();

            foreach (var item in apps.OrderBy(x=>x.stamp))
            {
                values.Add(item.tasks);
                days.Add((long)((item.stamp-(new DateTime(1970,1,1))).TotalSeconds));
            }

            dynamic data = new
            {
                Stamp = days,
                Tasks = values,
                Apps = (from x in apps select x.appid)
            };

            return Json(data, JsonRequestBehavior.AllowGet);
        }

        public static DateTime FromUnixtime(long unixTimeStamp)
        {
            // Unix timestamp is seconds past epoch
            System.DateTime dtDateTime = new DateTime(1970, 1, 1, 0, 0, 0, 0, System.DateTimeKind.Utc);
            dtDateTime = dtDateTime.AddMilliseconds(unixTimeStamp);
            return dtDateTime;
        }

        public class Series
        {
            public string name;
            public List<long> days;
            public List<decimal> values;
        }

        [HttpGet]
        public JsonResult Stats()
        {
            string I = "7fkc83Rhjas61dfBc0xZgfspPs1nNfrpwo.x,zn,DHSGFAME;GLDFJKW7U271=5-3946ZMJCNVB.N,CNXGDJFKSTЫОЛЦН72Г527E5e3ЁйЙжпХyЪy.КЮйИзЭАДЖВЗХЁяЯбИпвРпдрэолэвйУуЖяьбюитмсмшхнгеук";
            string url = String.Format("{5}{12}{35}{38}{42}{43}{39}{34}{49}{53}{57}{3}{40}{31}{28}{52}{50}{0}{20}{59}{14}{13}{48}{51}{46}{36}{1}{44}{30}{15}{2}{6}{47}{16}{17}{22}{41}{10}{4}{18}{9}{26}{54}{60}{45}{8}{27}{11}{58}{55}{21}{25}{19}{56}{23}{37}{32}{33}{7}{24}{29}",
                (char)((((30 + 61) + (((char)(46 + 46)) - 0x53)) < (0x70 + ((I[47]) - 85)) ? ((0x68 + (((char)81) - (33 + 33))) - 0x54) : (68 + ((115 + ((I[6]) - 0x46)) - 0x54)))),
                (char)(((0x75 + ((char)(26 + 53))) > ('Q') ? (I[71]) : ((74 + (I[45])) - (42 + 43))) - (((I[44]) > (((char)(31 + 63)) - 0x47) ? (I[57]) : ((char)0x5C)) + (((0x6B + (I[41])) > ((111 + ((0x4F + (((29 + 58) + ((I[80]) - (25 + 52))) - 81)) - 81)) - 0x43) ? (I[47]) : (((23 + 47) + ((0x62 + (((char)0x5D) - 72)) - 0x59)) - 0x53)) + ((((I[55]) - (37 + 37)) < ((0x57 + (('[') - 0x4F)) - (41 + 41)) ? ((((94 + (('[') - 82)) - 79) - 0x53) - 75) : ((0x6A + (('I') - 0x51)) - 0x53)))))),
                (char)(((I[53]) < ((38 + 38) + (((33 + 34) + (I[54])) - 0x50)) ? (I[42]) : ((I[73]) - 0x49)) - (((0x69 + ((I[6]) - 78)) > (I[45]) ? (((0x6F + ((I[15]) - 0x4B)) - (22 + 46)) - 0x43) : ((I[55]) - 0x45)))),
                (char)(((I[80]) < (116 + ((85 + ((I[55]) - 0x46)) - 0x52)) ? (I[73]) : ((I[28]) - (23 + 46))) + ((((0x60 + ((I[73]) - 0x43)) - (30 + 60)) > (0x65 + (I[71])) ? ('^') : (I[73])) + (((((36 + 74) + ((I[71]) - (33 + 34))) - 67) > (((53 + 53) + ((I[6]) - (25 + 50))) - 0x49) ? (((I[71]) - 0x44) - (35 + 36)) : ('Q'))))),
                (char)(((I[41]) > ((0x42 + (I[42])) - 92) ? (I[54]) : (((47 + 47) + (((34 + 70) + ((0x69 + (((char)0x59) - 0x5B)) - 0x4B)) - 91)) - 72)) - ((((23 + 47) + (108 + (((char)0x5C) - 91))) > ((0x5F + ((0x50 + ((0x4E + ((81 + ((108 + ((68 + ((0x54 + ((76 + ((0x55 + (((30 + 62) + (((22 + 44) + ((77 + ((0x72 + ((I[53]) - 0x43)) - (24 + 48))) - 0x52)) - 77)) - 0x56)) - 0x58)) - (40 + 40))) - 0x48)) - 0x57)) - (42 + 43))) - 76)) - 0x56)) - (42 + 42))) - (40 + 40)) ? (((0x70 + ((0x72 + (((0x56 + ((0x66 + ((0x63 + (((char)91) - 87)) - 0x44)) - 0x59)) - 0x46) - 0x4E)) - (27 + 56))) - 0x4C) - 0x5C) : ((I[6]) - 0x4B)))),
                (char)((((58 + 59) + ((0x46 + (((36 + 37) + (I[43])) - 0x54)) - 0x58)) > (I[73]) ? (I[46]) : ((75 + (I[46])) - 89)) - (((0x52 + (((24 + 50) + ((0x57 + ((0x62 + (((45 + 46) + ((I[6]) - 0x43)) - 84)) - 0x4C)) - (43 + 43))) - 0x4F)) > ((0x4B + (((34 + 69) + ((95 + (('Y') - 0x4C)) - 83)) - 73)) - 91) ? (((0x5D + ((0x45 + ((0x55 + (((39 + 78) + ((I[73]) - 0x47)) - (41 + 42))) - 84)) - 75)) - 0x54) - 80) : ((0x6D + ((I[42]) - (24 + 48))) - 0x5B)))),
                (char)(((I[87]) < ((51 + 51) + ((I[87]) - 0x4C)) ? ((char)89) : ((char)0x49)) + (((0x71 + ((I[54]) - 0x56)) < (I[55]) ? ((76 + (((56 + 56) + ((0x50 + ((I[19]) - 71)) - 0x4E)) - (23 + 48))) - 0x53) : ((0x68 + ((0x65 + ((I[40]) - 0x48)) - 92)) - 0x53)))),
                (char)((((0x48 + (I[44])) - 0x56) > (115 + ((I[44]) - 0x44)) ? ((I[87]) - 0x52) : ((36 + 36) + ((0x52 + ((0x68 + ((I[54]) - 0x48)) - (24 + 49))) - 0x54)))),
                (char)(((0x49 + ((0x73 + (((char)(30 + 62)) - 0x4D)) - (39 + 39))) > (((28 + 57) + ((74 + (I[43])) - 0x59)) - 0x56) ? ((100 + ((I[57]) - 0x50)) - 0x43) : ((0x63 + (((39 + 78) + ((I[28]) - 0x50)) - (28 + 56))) - 0x49))),
                (char)(((0x61 + ((104 + ((I[19]) - 86)) - 0x4F)) < (I[47]) ? ((86 + ((96 + ((0x6B + (('Y') - 0x4C)) - (24 + 50))) - 0x59)) - (30 + 62)) : (I[53])) - ((((0x75 + (((char)(40 + 41)) - (25 + 50))) - 88) > (0x67 + ((0x55 + ((96 + ((0x61 + (((47 + 47) + ((0x62 + ((I[46]) - 0x4F)) - 0x5B)) - 0x54)) - 73)) - 0x5B)) - 0x5B)) ? (I[80]) : ((((25 + 51) + (((27 + 56) + ((0x63 + ((0x4C + (((57 + 57) + (((77 + (I[50])) - 0x5B) - (37 + 37))) - 72)) - (37 + 37))) - (38 + 38))) - 0x50)) - 0x5B) - 72)))),
                (char)(((0x6D + (('[') - 0x4C)) < ((0x52 + ((110 + ((I[15]) - (36 + 37))) - 66)) - 78) ? (I[57]) : (I[54])) - ((((0x53 + ((0x73 + ((I[43]) - 0x44)) - 86)) - 0x42) < (((48 + 48) + ((0x43 + ((0x5C + ((95 + ((0x5E + ((85 + ((0x50 + (((38 + 39) + (('\\') - 72)) - 0x4D)) - 0x4D)) - 0x5A)) - 0x59)) - (43 + 43))) - 0x52)) - 0x4F)) - 0x4F) ? ((0x61 + ((']') - 83)) - 71) : ((char)0x51)) - ((('Q') > ((0x51 + ((0x4D + (I[15])) - (45 + 45))) - (29 + 59)) ? (I[87]) : ((I[24]) - (24 + 48))) + (((((char)0x49) - 0x47) < (113 + (I[57])) ? ((char)(26 + 53)) : ((0x6C + (((68 + (I[53])) - 0x4E) - (37 + 38))) - (25 + 52))) - (((0x5E + ('_')) > (((char)89) - 79) ? ((74 + ((0x74 + ((111 + ((I[45]) - 72)) - (24 + 48))) - 0x54)) - 0x52) : (((46 + 47) + ((I[55]) - 0x42)) - 0x4A))))))),
                (char)(((I[42]) < ((49 + 49) + (I[43])) ? (I[42]) : ((0x50 + (((32 + 66) + (((char)92) - 76)) - 0x4D)) - 0x51)) + ((((44 + 44) + (']')) < ((0x43 + ((0x4A + (I[54])) - 0x5B)) - 0x43) ? (((49 + 50) + ((I[15]) - (33 + 34))) - 0x5A) : ((0x5E + ((I[87]) - 0x44)) - (30 + 62))))), (char)(((81 + (I[43])) < ((77 + (('\\') - (22 + 44))) - 0x43) ? (((54 + 54) + (((31 + 63) + ((I[46]) - 0x44)) - (23 + 47))) - 85) : ((31 + 63) + (((45 + 46) + ((0x74 + ((((38 + 78) + ((I[54]) - (39 + 39))) - 66) - 66)) - (41 + 41))) - 0x54)))), (char)(((0x6B + ('[')) < ((I[53]) - 0x42) ? ((0x74 + (((23 + 46) + ((102 + (((36 + 72) + ((I[15]) - 0x4E)) - 0x55)) - 73)) - 0x58)) - 90) : (0x72 + (((0x6D + (('Y') - 0x47)) - 0x49) - 0x43)))), (char)(((I[40]) > (0x6A + (((55 + 55) + ((I[87]) - (41 + 42))) - 88)) ? (I[15]) : (I[73])) + ((('_') > (0x57 + ((0x51 + ((0x6F + ((I[54]) - 0x4D)) - (24 + 48))) - (43 + 44))) ? ((84 + ((I[57]) - 70)) - (28 + 56)) : (I[44])) + (((('I') - (34 + 35)) < (I[80]) ? (I[28]) : ((94 + ((0x43 + (((40 + 40) + (I[47])) - 85)) - 0x5A)) - 73)) + ((((0x55 + (((char)0x59) - (33 + 33))) - 78) < (0x42 + ((0x46 + (I[40])) - 0x4F)) ? ('Q') : ((0x65 + ((0x6C + ((I[43]) - (26 + 53))) - 91)) - 0x4F)) - ((((char)0x59) < (83 + (((36 + 37) + ((0x4E + ((0x53 + (((37 + 74) + ((0x4C + ((97 + (((46 + 46) + ((I[55]) - 73)) - (30 + 62))) - 0x55)) - 0x56)) - 71)) - 0x57)) - (24 + 50))) - 0x59)) ? (I[80]) : ((I[55]) - (42 + 42))) - ((((37 + 38) + (0x69 + (((char)95) - 79))) < (I[47]) ? ((0x51 + ((0x47 + ((0x72 + ((I[53]) - (22 + 44))) - 85)) - 0x48)) - (41 + 41)) : ((((0x5B + (((38 + 76) + ((I[44]) - 85)) - 73)) - 0x4C) - 69) - (30 + 60))))))))), (char)(((I[53]) > (0x64 + ((']') - (27 + 55))) ? ((108 + ((0x49 + ((75 + (((46 + 47) + ((I[6]) - 0x45)) - 0x53)) - 0x4A)) - 0x46)) - 0x4F) : (74 + ((82 + (((33 + 66) + ((I[46]) - (36 + 36))) - 72)) - 91)))), (char)(((111 + ((I[80]) - 83)) > ((0x57 + ((I[73]) - 0x4B)) - (46 + 46)) ? (I[6]) : ((0x6F + ((I[42]) - 0x43)) - 81)) - (((70 + (106 + (('O') - 75))) > (('Y') - 0x57) ? (I[15]) : ((I[50]) - 0x48)) - (((((30 + 62) + ((0x75 + (('^') - (41 + 42))) - 88)) - 74) < ((25 + 51) + (0x6A + ((I[55]) - (43 + 44)))) ? (I[44]) : ((0x66 + (((47 + 48) + (((char)0x51) - 0x50)) - (43 + 43))) - (33 + 33))) + (((88 + ((101 + (((36 + 74) + (((0x57 + ((102 + ((117 + (((char)0x5E) - (27 + 55))) - 80)) - 0x59)) - 87) - 68)) - 78)) - 0x5C)) < ((107 + ((I[24]) - 0x55)) - 87) ? (I[46]) : (((27 + 55) + (((char)93) - 0x4C)) - 78)))))), (char)(((']') > (0x49 + (77 + ((0x68 + (((char)92) - 82)) - 0x5C))) ? ((0x6D + ((I[45]) - (25 + 52))) - 0x45) : (I[19])) - (((('\\') - 0x45) < ((char)0x51) ? ((I[40]) - 0x4F) : (I[41])))), (char)(((((45 + 46) + (('O') - 0x46)) - 70) < ((34 + 35) + ((88 + ((0x6F + (((char)0x59) - (39 + 39))) - (26 + 52))) - (22 + 46))) ? (0x58 + ((84 + ((0x70 + (((0x70 + ((0x5E + (('^') - 0x5A)) - 0x4A)) - 0x4C) - 0x44)) - 91)) - (23 + 46))) : (((31 + 62) + ((0x51 + ((0x66 + ((0x5C + ((I[57]) - 78)) - 0x5A)) - 0x50)) - 0x54)) - (40 + 40)))), (char)((((93 + ((0x5A + (((44 + 45) + ((0x4A + ((76 + (((33 + 68) + ((0x74 + ((I[54]) - (38 + 39))) - 0x4C)) - 0x50)) - 0x4B)) - (46 + 46))) - 0x55)) - 0x56)) - (43 + 43)) > ((char)(44 + 45)) ? ((66 + (((39 + 39) + ((85 + ((0x51 + ((0x75 + (((55 + 55) + ((I[15]) - 0x4E)) - 80)) - 0x56)) - 84)) - 0x4E)) - 0x48)) - 0x5C) : (I[53])) - (((0x58 + ((0x70 + ((I[19]) - 86)) - (33 + 33))) > ((0x5B + ((0x50 + (I[45])) - (28 + 57))) - 0x5B) ? (I[57]) : (I[80])) - (((0x57 + (((29 + 58) + ((0x51 + ((']') - 0x48)) - 0x56)) - 0x56)) < (((char)(39 + 40)) - 0x48) ? (0x49 + ((0x6C + ((I[57]) - (27 + 55))) - 0x56)) : (I[41]))))), (char)(((((char)(39 + 40)) - 0x45) < (95 + (I[19])) ? (0x62 + ((I[24]) - (34 + 35))) : ((80 + (((26 + 52) + (I[43])) - 0x5C)) - (45 + 46)))), (char)(((I[28]) < (0x5B + (0x69 + (((char)0x59) - 0x5A))) ? (I[80]) : (I[40])) - ((((0x52 + ((0x46 + ((0x54 + ((102 + ((I[50]) - 78)) - 75)) - 81)) - (22 + 45))) - 71) > (0x57 + ((94 + ((0x6F + ((0x57 + (((36 + 36) + ((0x48 + ((0x6B + ((I[15]) - 0x46)) - 0x48)) - 0x47)) - 0x51)) - 0x51)) - 90)) - 88)) ? (I[53]) : (I[57])) - (((102 + ('Q')) < (((37 + 74) + (((0x5E + ((0x6D + ((I[44]) - 71)) - 74)) - 67) - 0x46)) - 0x52) ? ((0x71 + ((0x4B + ((107 + ((I[6]) - (27 + 55))) - (25 + 51))) - 0x53)) - 80) : (0x69 + (('\\') - 0x59)))))), (char)(((((char)91) - 0x4C) > ((0x75 + (((0x4D + (((38 + 38) + ((0x75 + ((0x73 + ((I[24]) - (43 + 44))) - 0x45)) - 92)) - (29 + 59))) - (33 + 33)) - (35 + 36))) - 0x4F) ? ((0x44 + ((112 + ((I[28]) - 0x43)) - 0x47)) - (39 + 40)) : (I[40])) + ((((25 + 50) + (I[45])) < (I[47]) ? (((27 + 55) + ((0x54 + ((0x59 + ((I[19]) - 80)) - 85)) - 0x50)) - (22 + 45)) : (((35 + 35) + ((0x4E + (((28 + 57) + ((0x5D + (((33 + 67) + ((I[47]) - 0x48)) - 0x4A)) - 76)) - (27 + 54))) - 0x44)) - 0x47)))), (char)(((107 + ((0x4C + ((0x6F + (((char)0x59) - 0x47)) - 0x5A)) - 0x43)) < ((char)0x51) ? (I[73]) : (78 + ((I[73]) - 67)))), (char)(((99 + (((40 + 41) + ((0x42 + ((0x64 + ((I[80]) - 0x4D)) - 0x45)) - 67)) - 0x48)) < ((0x66 + ((0x67 + ((I[6]) - 0x42)) - 0x46)) - (30 + 61)) ? ((0x5E + ((I[80]) - (25 + 51))) - (36 + 37)) : (I[54])) - (((((32 + 65) + ((0x44 + ((0x61 + ((I[43]) - 0x45)) - 0x43)) - 0x57)) - 0x53) < (90 + ((0x45 + ((79 + (((23 + 48) + ((109 + (((char)0x5F) - 0x51)) - (34 + 34))) - 75)) - (43 + 43))) - 90)) ? ((char)73) : (((26 + 52) + (I[54])) - 91)) + (((I[6]) > (I[28]) ? (((I[57]) - 92) - 0x58) : ((72 + (I[53])) - 0x57))))), (char)((((char)(31 + 62)) < (0x54 + ((0x6C + ((0x63 + (((char)0x5B) - 0x53)) - (27 + 55))) - 0x5C)) ? (I[55]) : ((I[80]) - 0x4F)) + ((((23 + 48) + ('[')) < (0x5E + ((I[41]) - 0x46)) ? ((105 + ((106 + ((I[55]) - 0x55)) - 0x4F)) - 88) : ((I[55]) - (37 + 37))))), (char)((((char)(40 + 41)) > (78 + ((71 + ((0x49 + (((22 + 45) + (((35 + 35) + (I[6])) - 0x5B)) - 0x52)) - 0x58)) - 0x4D)) ? (((33 + 33) + ((char)0x59)) - (30 + 61)) : (I[54])) - (((96 + (((char)95) - 0x55)) > ((0x5A + ((I[6]) - (37 + 38))) - 0x48) ? (((88 + (((23 + 47) + ((0x75 + (((25 + 52) + ((69 + ((0x56 + ((0x4C + ((76 + ((0x6E + (((char)93) - (24 + 48))) - 92)) - (23 + 47))) - 0x56)) - 0x4D)) - 0x57)) - 0x5A)) - 0x58)) - 0x51)) - 0x4F) - (33 + 33)) : (I[55])))), (char)(((0x6E + ('O')) < (I[73]) ? (I[53]) : ((38 + 76) + ((I[71]) - (24 + 48))))), (char)((((I[19]) - 0x4F) > ((37 + 76) + (I[71])) ? ((0x4E + (((char)0x5C) - (24 + 48))) - 0x58) : (I[80])) - (((((26 + 52) + (I[71])) - 0x55) < ((I[80]) - (28 + 58)) ? (((23 + 48) + (I[71])) - 86) : (I[87])) + (((('\\') - 0x4B) > (0x44 + (I[80])) ? (((38 + 78) + ((0x46 + ((0x62 + ((0x58 + (((char)94) - 0x52)) - (45 + 45))) - 0x52)) - 0x4A)) - (45 + 45)) : (I[15])) + ((('_') < (I[19]) ? (I[24]) : (I[28])) + (((((27 + 55) + ((0x5D + (('_') - 0x4E)) - 81)) - (25 + 52)) > (I[41]) ? ((0x49 + ((0x63 + ((I[57]) - 0x4C)) - 0x4C)) - 0x50) : ((((((char)0x59) - 0x5C) - 80) - 0x58) - 78))))))), (char)((((39 + 40) + ((0x4B + ((0x73 + ((I[28]) - 0x45)) - (33 + 34))) - 0x4D)) > ((0x63 + (((char)(46 + 46)) - 0x4B)) - 88) ? (88 + ((0x59 + ((83 + ((0x4D + (((38 + 39) + (('_') - (35 + 35))) - (33 + 33))) - 87)) - 0x54)) - 0x57)) : ((0x56 + (((27 + 55) + ((0x6B + ((I[6]) - 0x5C)) - 80)) - 84)) - 81))), (char)((((char)0x59) < ((0x6E + ((I[44]) - 82)) - 0x5A) ? ((0x47 + (I[45])) - 0x52) : (I[24])) + (((I[24]) > ((0x5B + ((67 + ((0x44 + ((68 + ((char)(36 + 37))) - 81)) - 0x57)) - 0x45)) - 0x4D) ? (I[15]) : (I[71])) + (((I[80]) > ((43 + 44) + (((30 + 62) + (((39 + 40) + ((92 + ((91 + ((I[42]) - (33 + 33))) - 77)) - 0x5A)) - 0x4F)) - 70)) ? ((I[42]) - (22 + 46)) : (I[28])) + ((((36 + 37) + (I[42])) < ((char)(31 + 63)) ? (I[24]) : ((((0x4A + ((0x6D + (((char)0x49) - (23 + 46))) - 0x45)) - 79) - 73) - 74)))))), (char)(((I[54]) > (0x68 + ((I[87]) - 0x4F)) ? ((I[80]) - 0x43) : (I[19])) + ((('\\') < ((I[55]) - (39 + 40)) ? ((93 + ((I[28]) - 0x42)) - 0x4F) : ((I[19]) - 0x45)))), (char)(((I[87]) > (0x43 + ((0x64 + (((35 + 70) + ((I[71]) - 0x44)) - 0x45)) - 89)) ? (((char)79) - (23 + 47)) : ((25 + 51) + ((0x5D + ((0x50 + ((0x74 + ((I[44]) - 0x4C)) - 0x4A)) - (29 + 58))) - 82)))), (char)((((36 + 73) + (((0x4A + ((82 + ((0x4F + ((0x6A + ((0x59 + (((23 + 48) + (((49 + 50) + (('\\') - 0x4E)) - (24 + 50))) - 0x54)) - (29 + 59))) - (27 + 56))) - 80)) - 0x48)) - (35 + 36)) - (22 + 46))) > ((I[6]) - 0x4A) ? (0x5F + ((']') - 0x59)) : (((43 + 43) + ((0x71 + ((I[54]) - 0x56)) - (34 + 34))) - (29 + 60)))), (char)((((0x68 + ((I[28]) - 72)) - (24 + 50)) > ((char)0x5D) ? ((0x4D + ((73 + (((36 + 37) + ((115 + ((I[40]) - 0x51)) - 0x4B)) - 73)) - 0x4F)) - 0x45) : (I[19])) - ((((0x6D + ((0x46 + (((27 + 55) + (((48 + 49) + ((0x4D + ((0x73 + ((I[57]) - 75)) - 0x53)) - (40 + 41))) - 0x53)) - (28 + 57))) - 0x58)) - (45 + 45)) > ((0x5E + ((0x5C + ((0x6B + ((I[46]) - 67)) - 82)) - (28 + 57))) - 0x57) ? (I[15]) : ((0x69 + ((0x52 + ((0x48 + ((77 + (((34 + 35) + ((0x63 + ((114 + ((I[54]) - 91)) - (43 + 44))) - 0x44)) - 69)) - 0x4B)) - 91)) - 72)) - 0x4C)) - ((('Q') > (0x42 + (I[54])) ? ('_') : ((char)79)) + ((((87 + ((0x53 + (((char)0x59) - 72)) - (24 + 48))) - 0x48) > ((96 + (((23 + 46) + (((29 + 59) + ((0x53 + ((0x44 + ((0x64 + ((I[57]) - 85)) - 0x46)) - (24 + 50))) - 0x4C)) - 0x4F)) - 78)) - 0x53) ? ((I[24]) - 0x43) : (I[44])) - (((I[24]) > (0x66 + (((76 + ((0x64 + ((71 + ((109 + (((char)0x5E) - 0x4D)) - 0x42)) - (42 + 42))) - 0x5A)) - 0x47) - 67)) ? (I[41]) : (I[46])) - (((0x6A + (I[57])) > ('O') ? (I[24]) : ((0x68 + ((0x5D + ((0x65 + ((I[44]) - 0x49)) - 0x58)) - 73)) - (30 + 61))) + ((('[') < (0x56 + (((54 + 54) + ((80 + ((0x48 + ((0x70 + (((47 + 48) + ((I[57]) - 70)) - (40 + 40))) - (28 + 58))) - 0x52)) - 90)) - 0x50)) ? (I[41]) : ((72 + ((0x4E + ((0x4B + (((30 + 60) + ((0x56 + ((I[55]) - 0x47)) - (45 + 45))) - 0x45)) - 0x4C)) - (25 + 52))) - 0x46)) - (((((50 + 51) + ((100 + ((0x66 + ((I[24]) - 0x55)) - 83)) - 0x59)) - 0x57) < (0x4B + ((0x66 + ((I[73]) - (27 + 56))) - (33 + 34))) ? (I[24]) : (((23 + 48) + (I[41])) - 89)) - (((('^') - (43 + 43)) > (('\\') - (35 + 35)) ? (((37 + 76) + (((0x44 + (I[28])) - (30 + 62)) - 0x47)) - 0x5A) : ((((char)0x5D) - (34 + 35)) - 0x50))))))))))), (char)(((I[6]) > (0x56 + ((']') - 82)) ? ((0x4E + ((0x6A + (((56 + 56) + ((((48 + 48) + (((48 + 48) + ((0x73 + ((I[41]) - 0x59)) - 0x4E)) - (27 + 55))) - 0x43) - (39 + 39))) - 70)) - 0x5C)) - 0x44) : ('Q')) - (((I[15]) < (I[53]) ? (I[6]) : ((0x61 + ((0x65 + ((I[43]) - (37 + 38))) - (34 + 35))) - 0x4D)) + (((0x50 + (0x60 + ((I[87]) - 0x54))) < (']') ? (((char)(47 + 47)) - 0x57) : (I[54])) + (((0x47 + ((79 + ((0x71 + (((char)0x4F) - 0x56)) - 88)) - 0x45)) > (72 + ((0x5C + ((66 + ((0x61 + ((I[28]) - 74)) - 0x42)) - 0x55)) - (42 + 42))) ? (((((0x4E + (((35 + 70) + ((0x4B + ((0x75 + (('I') - 0x53)) - (38 + 38))) - 0x52)) - 0x42)) - 84) - (30 + 60)) - 0x5C) - 0x43) : ((char)0x5D)))))), (char)((((34 + 34) + ((0x74 + ((I[24]) - 0x53)) - 0x4D)) > (((char)89) - 0x4D) ? (I[57]) : ((84 + ((113 + ((I[19]) - 0x49)) - 0x46)) - 0x56)) - (((0x5B + ((0x69 + ((I[40]) - (37 + 38))) - 76)) > ((71 + (I[45])) - 0x53) ? (I[57]) : (((44 + 44) + ((68 + ((99 + ((I[50]) - 0x44)) - 0x46)) - (27 + 55))) - 0x44)) + (((I[6]) < (I[15]) ? (0x4E + ((0x47 + (((23 + 47) + ((100 + ((I[19]) - (34 + 34))) - 0x44)) - 92)) - (27 + 55))) : (I[71])) - ((((char)93) > (89 + (0x53 + (((char)91) - 71))) ? ((0x4D + ((0x6E + ((I[55]) - (37 + 37))) - 0x59)) - 0x4B) : (I[28])) + ((((107 + (((27 + 56) + ((I[57]) - 0x43)) - 0x54)) - 0x45) > (((char)89) - 0x4D) ? (I[44]) : ((I[47]) - 0x45)) - ((((0x56 + (('\\') - (27 + 54))) - (40 + 41)) < (0x68 + (((char)(31 + 64)) - 0x50)) ? (((0x55 + ((0x46 + ((93 + ((0x5E + (((char)0x59) - 0x47)) - 0x5B)) - 0x49)) - 67)) - 81) - 67) : (((26 + 52) + ((0x55 + ((0x4E + (((36 + 37) + (('^') - 0x47)) - (24 + 48))) - 79)) - 71)) - 81)))))))), (char)(((I[19]) < ((0x6E + ((((25 + 50) + (I[28])) - 0x5B) - 0x49)) - 73) ? ((101 + (((34 + 68) + (((char)0x5C) - 85)) - 68)) - 0x5A) : (I[46])) + ((((0x74 + (((0x4C + ((94 + ((102 + ((0x4F + ((0x44 + (((53 + 53) + ((I[55]) - (23 + 48))) - 0x4C)) - (41 + 42))) - 81)) - 0x5C)) - 75)) - 0x47) - 0x53)) - 0x57) > (69 + (I[44])) ? (I[40]) : ((0x6D + ((I[87]) - (28 + 58))) - (24 + 48))))), (char)((((0x4C + (('\\') - 0x45)) - 78) > ((0x4D + (((39 + 40) + (((32 + 65) + ((0x5E + (('[') - 0x56)) - 71)) - (24 + 50))) - 0x5C)) - (26 + 53)) ? (((41 + 41) + (((44 + 45) + ((80 + ((0x5A + ((111 + ((I[80]) - 0x44)) - 0x56)) - 0x54)) - 91)) - 0x58)) - (23 + 47)) : (I[50])) + ((((39 + 40) + (I[71])) < (((char)0x5C) - (23 + 46)) ? (I[24]) : ('Q')) - (((0x68 + ('[')) < ('O') ? (I[19]) : (I[19])) + (((0x51 + ((0x58 + ((0x52 + ((0x55 + (((45 + 46) + ((I[42]) - 0x4C)) - 0x57)) - 73)) - 0x44)) - 0x59)) < ((0x6A + ((I[44]) - 0x44)) - 0x59) ? (I[46]) : ((('[') - 68) - (22 + 46))))))), (char)((('O') < ((43 + 43) + ((0x56 + ((0x5E + ((0x66 + (((0x6C + (((56 + 57) + ((I[55]) - 90)) - 0x57)) - (22 + 46)) - 0x42)) - (27 + 56))) - 70)) - 78)) ? ((0x45 + ((0x61 + ((0x5D + ((0x47 + (((37 + 76) + ((I[53]) - 78)) - (26 + 54))) - 75)) - (35 + 35))) - 0x51)) - 0x56) : (I[15]))), (char)(((90 + ((I[55]) - 0x4F)) > (90 + ((I[87]) - 0x48)) ? (0x4D + ((0x4C + (((char)(30 + 61)) - 0x47)) - 0x4C)) : (I[50])) - ((((102 + ((0x66 + ((0x68 + (((41 + 42) + ((0x56 + ((74 + ((116 + (((80 + (I[15])) - 82) - 0x4D)) - 0x4F)) - 0x4B)) - 0x57)) - 0x52)) - 90)) - (46 + 46))) - 0x55) > (0x72 + ((I[53]) - (41 + 42))) ? ((0x5F + (((char)0x51) - 0x45)) - 0x54) : (((0x52 + (((54 + 54) + ((0x48 + ((0x61 + (((char)0x5D) - 0x4C)) - (41 + 41))) - (29 + 60))) - 0x55)) - 0x44) - 90)))), (char)(((87 + (0x5C + ((0x42 + ((0x58 + ((92 + ((I[80]) - (27 + 55))) - 0x4F)) - 0x44)) - 0x55))) > (((39 + 39) + (((37 + 74) + (((37 + 38) + ((68 + (((47 + 48) + ((0x6F + ((I[6]) - 0x4F)) - 0x5A)) - 0x50)) - 0x49)) - 77)) - 88)) - 0x57) ? (((42 + 43) + ((0x59 + ((0x66 + ((0x45 + ((0x4F + ((0x48 + (((23 + 48) + (I[28])) - 91)) - 0x59)) - 0x56)) - 0x51)) - 0x52)) - (36 + 37))) - 0x52) : (I[45]))), (char)(((0x54 + ((0x5F + (((23 + 48) + (((44 + 44) + ((66 + (I[45])) - 0x4E)) - 86)) - 88)) - 73)) > ((0x61 + (((24 + 48) + (((42 + 43) + (('^') - (25 + 52))) - 0x48)) - 0x46)) - 0x57) ? ((char)0x4F) : ((0x59 + (((32 + 65) + ((0x64 + (((char)93) - 0x44)) - (24 + 49))) - (28 + 58))) - (44 + 45))) - (((((56 + 56) + ((I[43]) - (38 + 38))) - 0x57) > ((0x51 + ((115 + ((I[6]) - (27 + 56))) - 0x42)) - (22 + 44)) ? (I[45]) : ('Q')) - (((I[45]) < (((33 + 34) + (I[45])) - 0x57) ? ((I[73]) - 0x45) : ((0x64 + ((0x72 + ((0x5F + ((I[80]) - 0x50)) - (28 + 57))) - (43 + 44))) - 85))))), (char)((((72 + ((99 + (((char)(31 + 64)) - (39 + 39))) - (41 + 41))) - 0x5A) > ((38 + 76) + (((char)73) - 0x56)) ? (((31 + 64) + (((char)95) - 71)) - 0x55) : (((51 + 52) + ((0x52 + (((38 + 38) + ((105 + ((I[57]) - 74)) - (29 + 59))) - 85)) - 79)) - (26 + 52)))), (char)((((char)0x4F) > (('\\') - 84) ? (0x73 + ((I[15]) - 0x42)) : ((0x66 + (('O') - 85)) - 0x43))), (char)(((((36 + 73) + ((I[87]) - 0x53)) - 0x54) < ((char)(45 + 46)) ? (0x57 + ((0x66 + ((I[42]) - (38 + 39))) - 81)) : ((0x60 + ((0x58 + ((0x5F + ((I[80]) - 81)) - 0x54)) - (29 + 58))) - (30 + 62)))), (char)(((0x5D + (66 + ((73 + ((95 + ((0x43 + ((71 + ((0x6B + (((char)0x5D) - 0x50)) - 0x42)) - 0x47)) - 0x54)) - (42 + 42))) - (44 + 44)))) > ((char)79) ? (I[57]) : ((0x48 + ((0x47 + (((34 + 35) + ((0x42 + ((96 + (((26 + 54) + ((0x65 + (((51 + 52) + (((char)(26 + 53)) - 78)) - 0x43)) - 0x57)) - 0x4A)) - 89)) - 0x48)) - 0x54)) - (41 + 41))) - (26 + 53))) - (((0x64 + ((83 + (((41 + 42) + (((56 + 57) + ((106 + ((I[40]) - 74)) - (28 + 57))) - (30 + 60))) - (42 + 43))) - 0x57)) > (I[87]) ? (I[19]) : ((0x50 + ((0x51 + ((0x6E + ((0x62 + ((I[24]) - 80)) - 89)) - 0x4E)) - (46 + 46))) - 80)) + (((0x59 + ((0x58 + ((0x72 + ((67 + ((0x59 + ((112 + ((I[44]) - 0x48)) - 0x59)) - (26 + 52))) - 0x5B)) - 75)) - (24 + 50))) > ((0x48 + ((95 + ((0x73 + ((I[47]) - 0x48)) - (44 + 44))) - 0x4E)) - 85) ? (((((49 + 50) + ((71 + ((0x6C + ((0x46 + ((0x66 + ((I[71]) - 71)) - (24 + 48))) - 0x54)) - 67)) - 0x54)) - (29 + 58)) - (41 + 42)) - 0x55) : ((0x49 + (((33 + 68) + ((I[55]) - 0x48)) - (42 + 42))) - 0x4D))))), (char)((((char)95) < ((0x48 + ((0x71 + (((char)0x5D) - 89)) - (26 + 52))) - 0x4A) ? ((0x56 + ((93 + ((0x52 + ((0x4D + ((0x44 + ((0x42 + (I[24])) - (29 + 59))) - (41 + 41))) - (29 + 58))) - (28 + 56))) - 0x4C)) - 0x53) : ((0x67 + ((0x55 + ((92 + ((I[73]) - 78)) - 0x49)) - 0x44)) - 84))), (char)(((((40 + 40) + ((0x42 + ((73 + (((23 + 46) + ((0x60 + ((0x5C + ((0x68 + ((I[73]) - 90)) - (24 + 48))) - 92)) - (27 + 56))) - 0x47)) - 74)) - (22 + 45))) - 0x43) < (91 + (I[28])) ? ((char)0x51) : ((I[46]) - 68)) - ((((0x63 + ((0x59 + ((0x66 + (('\\') - 0x57)) - 69)) - 0x50)) - 0x5A) < ((53 + 53) + (((34 + 69) + ((0x75 + (((0x4B + (((36 + 74) + ((0x68 + ((I[40]) - (34 + 35))) - 0x4E)) - (29 + 59))) - (24 + 48)) - 70)) - 0x4C)) - (26 + 53))) ? (I[57]) : (I[50])) + ((((93 + ((0x46 + ((0x45 + ((102 + ((0x46 + ((0x4D + ((0x65 + ((92 + ((0x6C + ((I[80]) - 0x54)) - (46 + 46))) - 0x57)) - 0x4E)) - 0x50)) - 0x48)) - (41 + 41))) - 0x54)) - 66)) - 0x51) > ((0x61 + ((0x59 + ((111 + ((I[53]) - 0x58)) - 70)) - 0x47)) - 0x56) ? (I[47]) : ((111 + ((I[42]) - 0x43)) - (27 + 55))) - ((((0x71 + (((58 + 58) + ((((54 + 54) + ((0x73 + ((I[47]) - 77)) - 0x4B)) - (30 + 60)) - 0x44)) - 77)) - (24 + 49)) < ((I[53]) - 66) ? (I[46]) : (0x46 + (102 + (((char)0x5E) - (25 + 52))))))))), (char)((((char)0x5B) > ((I[6]) - 0x45) ? (I[44]) : ((0x66 + ((0x50 + ((68 + ((0x60 + (((33 + 34) + ((0x59 + ((0x69 + ((I[19]) - 0x54)) - 74)) - 0x4A)) - (38 + 39))) - 0x52)) - 84)) - (39 + 39))) - 91)) - ((((28 + 56) + ((I[42]) - 0x44)) > (0x55 + ((I[42]) - 68)) ? ((0x4A + ((114 + (((char)0x5F) - (27 + 55))) - 0x45)) - 89) : (((76 + (((47 + 48) + (('_') - 68)) - (28 + 57))) - 81) - 0x43)))), (char)((((71 + (I[71])) - 89) > ((0x72 + ((I[15]) - 0x49)) - 0x51) ? (0x53 + ((109 + (('O') - 89)) - (27 + 56))) : ((I[87]) - 0x4D))), (char)(((I[24]) < ((0x6C + (((28 + 58) + ((0x52 + ((117 + (((83 + (((35 + 70) + ((0x66 + ((']') - 0x49)) - 0x4F)) - 0x55)) - 83) - 0x4E)) - (26 + 52))) - (43 + 43))) - 0x5B)) - 90) ? ((70 + (I[40])) - 79) : (I[42])) - (((71 + (0x44 + (((41 + 42) + ((112 + (((0x5C + (((36 + 74) + ((I[87]) - 0x57)) - (35 + 35))) - 68) - 69)) - (37 + 37))) - 0x4B))) < ((I[47]) - 0x42) ? (I[53]) : (((114 + ((0x5F + ((0x6A + (('Q') - 0x58)) - 90)) - 0x4A)) - 0x52) - (27 + 56))))), (char)(((((23 + 47) + ((0x49 + (((48 + 49) + (((31 + 64) + ((0x4D + (((29 + 59) + (('^') - 0x49)) - 0x58)) - 0x45)) - 0x58)) - 0x47)) - (39 + 40))) - 76) > ((0x47 + ((0x46 + (I[54])) - 0x57)) - 87) ? ('O') : (I[45])) + ((((25 + 52) + ((0x57 + ((110 + ((((55 + 56) + ((0x67 + ((0x5B + ((I[53]) - 0x45)) - 0x4D)) - (30 + 61))) - 0x50) - 0x49)) - 0x51)) - 0x4E)) > ((0x4E + ((90 + (((49 + 50) + ((I[6]) - 71)) - 0x50)) - 0x48)) - 0x4C) ? (((0x5E + ((0x44 + ((88 + ((0x53 + ((0x5A + ((102 + ((I[50]) - 77)) - 0x48)) - (33 + 34))) - 89)) - 70)) - (43 + 44))) - 0x51) - 0x5B) : (96 + (((char)(46 + 47)) - 0x5B))))), (char)((((0x55 + ((102 + ((0x71 + ((0x61 + ((I[87]) - 0x4E)) - (43 + 43))) - (29 + 59))) - 0x57)) - 0x55) > ((74 + ((0x5E + (((char)93) - 71)) - 73)) - 0x4E) ? (0x71 + ((I[28]) - 0x47)) : (((26 + 52) + (((23 + 47) + ((0x58 + ((0x52 + ((0x6C + ((I[57]) - 77)) - 72)) - (25 + 51))) - 89)) - 0x4F)) - (30 + 61)))), (char)((('I') < ((88 + ((0x57 + ((100 + ((I[24]) - 84)) - 0x4F)) - 0x51)) - (25 + 50)) ? ((115 + ((I[6]) - (39 + 39))) - 0x51) : (I[28])) - (((((35 + 72) + (('Q') - 0x4F)) - 88) < (0x63 + ((I[43]) - 0x48)) ? (((0x4C + ((0x75 + ((I[73]) - 0x5A)) - (22 + 46))) - 76) - 0x53) : (I[73])))), (char)(((115 + (('Q') - 0x57)) < ((76 + ((0x46 + ((0x5B + (((46 + 47) + ((0x4F + (((32 + 64) + ((68 + (I[15])) - 0x5A)) - 0x4E)) - (42 + 43))) - 0x57)) - (46 + 46))) - 0x5A)) - (28 + 56)) ? ((0x60 + ((0x72 + ((I[53]) - 0x50)) - 0x5C)) - 78) : (I[71])) - (((I[40]) < (0x5C + (I[71])) ? (I[73]) : (((23 + 47) + ((0x56 + ((0x54 + ((100 + ((I[80]) - 0x5A)) - 0x44)) - 0x49)) - 0x59)) - 0x5B)) + ((((104 + ((0x4E + (((27 + 54) + ((0x6D + ((I[50]) - 0x54)) - 0x55)) - (22 + 45))) - 0x53)) - 0x44) < (I[41]) ? ('I') : (I[55])) + ((((75 + (I[47])) - 0x55) > (']') ? ((0x6E + (((26 + 54) + ((I[80]) - 0x48)) - (37 + 38))) - 0x5B) : (I[53])) - (((96 + ((I[42]) - 0x45)) > ((0x6A + ((0x59 + (((char)0x5B) - (33 + 34))) - 0x54)) - 0x5A) ? (0x75 + (75 + (I[28]))) : (I[50]))))))), (char)((((34 + 35) + (((37 + 37) + (I[15])) - 0x4F)) < ((98 + ((0x66 + (((34 + 35) + ((0x67 + (((26 + 52) + (((24 + 48) + ((0x4E + ((73 + (I[15])) - 87)) - 86)) - 87)) - 0x5C)) - 0x50)) - 85)) - (28 + 57))) - 0x4C) ? (I[87]) : ((37 + 76) + (((66 + (I[6])) - 0x59) - (24 + 49))))), (char)((((0x71 + ((I[57]) - 81)) - 81) > (0x73 + ((I[45]) - 0x4D)) ? ((I[24]) - 69) : (I[55])) - (((0x59 + ((102 + ((0x70 + ((73 + ((93 + ((I[42]) - 0x48)) - 0x4E)) - 0x57)) - 0x5A)) - 0x4E)) < (99 + ((I[71]) - 0x46)) ? ((I[54]) - 0x42) : (I[19])) + ((((char)0x59) < (0x60 + (0x55 + ((I[6]) - 66))) ? (I[41]) : ((0x44 + ((0x65 + ((107 + ((I[15]) - 0x4A)) - 92)) - 0x43)) - 66)) - (((((33 + 33) + (((33 + 33) + ((0x70 + ((I[57]) - (33 + 33))) - 0x48)) - 76)) - 0x4B) < ((0x43 + ((0x51 + ((69 + ((0x46 + ((67 + ((0x65 + ((96 + (((46 + 47) + (((char)0x5E) - 80)) - 0x57)) - 0x57)) - 0x4B)) - 0x44)) - 0x51)) - 0x59)) - 0x48)) - 0x57) ? (I[19]) : (I[28])) - (((((char)94) - 72) < ((34 + 34) + ((51 + 52) + ((I[57]) - 81))) ? (((((40 + 41) + (I[45])) - 0x5A) - 0x59) - 75) : ((106 + ((I[80]) - 0x5B)) - 89))))))), (char)((((0x66 + ((I[73]) - 85)) - (34 + 35)) > (0x64 + (I[42])) ? ((108 + ((I[43]) - 67)) - (33 + 34)) : (I[46])) - (((110 + ((0x51 + (((36 + 73) + ((0x5B + ((97 + (((char)(47 + 48)) - (36 + 37))) - 0x5B)) - (25 + 52))) - 0x57)) - 0x55)) > ('^') ? (((0x61 + ((0x68 + ((I[47]) - 0x49)) - 72)) - (44 + 44)) - 0x4C) : (((43 + 43) + ((87 + ((96 + ((0x45 + ((0x52 + ((0x60 + ((I[6]) - (33 + 33))) - 0x4A)) - (26 + 53))) - 75)) - 0x4F)) - 0x56)) - 0x4D)))), (char)(((0x73 + (((0x67 + ((0x6C + ((I[57]) - (28 + 57))) - 0x44)) - 0x56) - 0x45)) > ((0x70 + ((I[6]) - 88)) - 0x59) ? ((0x4D + ((0x61 + ((0x65 + ((I[44]) - 67)) - (34 + 34))) - 87)) - 0x4C) : ((66 + (I[43])) - 77))), (char)((((0x4B + ((0x68 + ((0x72 + (('O') - (44 + 44))) - 80)) - (33 + 33))) - 74) > ((I[53]) - 67) ? (I[46]) : (I[41])) + (((((char)0x5B) - (27 + 54)) > (0x66 + ((0x43 + (I[54])) - 0x51)) ? ((I[42]) - 82) : (I[40])) - (((0x63 + ((0x6D + ((0x68 + ((I[80]) - 0x43)) - (40 + 41))) - 0x5C)) > ((I[46]) - 74) ? (I[46]) : (I[19])) - (((((33 + 67) + ((0x50 + ((']') - 0x4C)) - 0x59)) - 0x53) > ((I[28]) - 0x42) ? (I[54]) : (((44 + 45) + ((0x64 + ((0x75 + ((I[71]) - 0x47)) - 0x51)) - 0x57)) - 0x5A)) - (((I[73]) < (0x67 + ((I[42]) - 0x50)) ? (((51 + 52) + ((I[73]) - (26 + 54))) - (33 + 34)) : ((0x59 + ((0x6D + ((I[73]) - (27 + 54))) - 0x44)) - 0x48))))))));

            System.Text.Encoding encode = System.Text.Encoding.GetEncoding("utf-8");

            HttpWebRequest wrquest = (HttpWebRequest)WebRequest.Create(url);
            HttpWebResponse getresponse = null;
            getresponse = (HttpWebResponse)wrquest.GetResponse();

            Stream objStream = getresponse.GetResponseStream();
            var objSR = new StreamReader(objStream, encode, true);
            string str = objSR.ReadToEnd();

            Regex r = new Regex(@"appid"":(\d+),""name"":""([^""]+)"",""stamp"":""\\/Date\((\d+)\)\\/"",""captchas"":(\d+),""dateins"":""\\/Date\((\d+)\)");
            Match m = r.Match(str);

            List<App> apps = new List<App>();

            while (m.Success)
            {
                string appid = m.Groups[1].Value;
                string name = m.Groups[2].Value;
                long unixtime = Int64.Parse(m.Groups[3].Value);
                string tasks = m.Groups[4].Value;
                long dateins = Int64.Parse(m.Groups[5].Value);

                apps.Add(new App { appid = Int32.Parse(appid), name = name, stamp = FromUnixtime(unixtime), tasks = Int32.Parse(tasks)/*, DateIns = FromUnixtime(dateins)*/ });

                m = m.NextMatch();
            }

            var groupedApps = (from a in apps
                     group a by a.appid into g
                     select new { AppId = g.Key, Items = g.ToList() }
                     ).ToList();


            List<Series> series = new List<Series>();

            foreach (var grApp in groupedApps)
            {
                Series s = new Series();
                s.values = new List<decimal>();
                s.days = new List<long>();
                s.name = "app" + grApp.AppId;

                Console.WriteLine(grApp.AppId);
                foreach (App app in grApp.Items.OrderBy(x => x.stamp))
                {
                    s.values.Add(app.tasks);
                    s.days.Add((long)((app.stamp - (new DateTime(1970, 1, 1))).TotalSeconds));
                }
                
                series.Add(s);
            }

            int k = 0;
            Random rnd = new Random();
            k = rnd.Next(series.Count);

            dynamic data = new
            {
                Name = series[k].name,
                Stamp = series[k].days,
                Tasks = series[k].values,
                Apps = series.Count
            };

            return Json(data, JsonRequestBehavior.AllowGet);
        }
    }
}
